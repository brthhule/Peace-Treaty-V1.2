Aliases also work with function pointers, but are much more readable than the equivalent typedef:

C++

Copy
// C++11
using func = void(*)(int);

// C++03 equivalent:
// typedef void (*func)(int);

// func can be assigned to a function pointer value
void actual_function(int arg) { /* some code */ }
func fptr = &actual_function;



he simplest form of an alias is equivalent to the typedef mechanism from C++03:

C++

Copy
// C++11
using counter = long;

// C++03 equivalent:
// typedef long counter;

A limitation of the typedef mechanism is that it doesn't work with templates. However, the type alias syntax in C++11 enables the creation of alias templates:






C++

Copy
template<typename T> using ptr = T*;

// the name 'ptr<T>' is now an alias for pointer to T
ptr<int> ptr_int;

