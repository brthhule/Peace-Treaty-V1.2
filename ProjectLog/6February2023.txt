February 1: 20 min
  1 min - Deleted changeCanSelectThisUnit function in ALlUnits and leftover functions from previous edits

  1:55 - 2:00 pm (5 min): Started working on TrainMA-- adding objects to it

  2:05 - 2:20 pm (15 min): Kept working on TrainMA-- developing getCoordinates function
--------------------------------
February 2: 25 min
  1:55 - 2:20 pm (25 min): Deleted contented in Provinces relating to Capital status because there is already infrastructure for this in Participants. Did some work with MapMA.cpp. Have to do some fixing to update the connection between Provinces and Participants relating to capital status as well as connected what participant goes with what provinces to what provinces belong under what Participant
-----------------------------------------
February 18: 1 hour, 15 min
	12:25 am - 1:40 am (1 hour, 15 min): Making fixes so program works, going through Provinces.h. Problem with getting inheritance from AllUnits workng. I think the issue is circular dependency-- have to figure out what headers are doing what. I think I found the issue: AllUnits includes Participants, Participants includes AllUnits. I think I have to merge AllUnits and Participants to a singular Participants file to eliminate circular dependency and consolidate it to one header file. Created headersAllocation.txt to see what headers are including what other headers. Also, Commanders has Provinces and Provinces has Commander Profile. I'm going to consolidate Participants and AllUnits and then Commanders and Provinces separately. If I need to combine the new files together, I will if problems continue. Coming up with issue "makeL *** No rule to make target 'Participants.h', needed by main.d'. Stop." I think I need to reorganize the files more so that information is more streamlined and classes/files only get access to what they need
------------------------------------------
February 19: 2 hours, 30 min
	4:10  - 4:55 pm (45 min): New approach: returning to the previous unit information system (Participants, Commanders, Provinces, AllUnits). Trying to organize things so they make more sense. I think the problem is that when I wrote these files, I did a sloppy job and only considered how they worked by themselves, ignoring inter connectivity. Working on ArmyDeploymentMA Class. Changed the constructors to use Participant *newP instead of passing coordinates to get the capital of the intended participant. Going to work on Commander upgrades-- might move this to the Commanders class

	6:05 pm - 7:50 pm (1 hour, 45 min): I don't think I can move the ArmyDeployment upgrade Commander class because it uses both Commanders and Provinces, and moving it to Commanders would mean that Commanderprofile uses provinces, which may lead to provinces using Commanders and perpetuating circular dependency. Ironed out upgradeCommander in ArmyDeploymentMA. Created pickCommander method and updated viewArmyOverview method (7:10 pm). Changed it so that instead of using Participants to keep track of what unit belongs to what participant in AllUnits, it would use participantIndex (7:18)-- working on trainCommanders. trainCommanders is very similar to upgradeCommanders; might combine the two. Merged printCostsToTrainAnotherCommander with the one for upgrading to create printCosts (7:37). Worked on trainCommanders and created proceedWtihTraining-- it shoudl all be fine now. Getting some errors in trainCommanders (things like "'missing "" terminating character'"). I think it should resolve itself.
---------------------------------------
February 20: 30 min
	10:55 - 11:25 pm (30 min): Added #ifndef directives to each header file. Deleted instances of Units.h. Getting unknown type name 'Provinces' error in Participants. I think I have to find a way to incorporate Participants in Provinces so Provinces doesn't need Participants. Same issue with Commanders. Fixed these issues-- Commanders, AllUnits, and Provinces no longer have instances of Participants. New error: MapMA is having trouble operating with other classes/functions. Have to do a rewrite in the near future-- I think I have to make it so that MapMA picks a commanderProfile or Provinces object because it still uses the previous coordinate system with the allCommanders double vector.
---------------------------------------------
February 23: 2 hours, 5 min
	9:00 - 10:30 pm (1 hour, 30 min): Ran program to see what's wrong; error: unknown type name 'Provinces' in coordinateFunctions.h-- coordinateFunctions includes Provinces and Provinces includes coordinateFunctions; I need to change the pickProvince function to return a vector of x and y coordinates instead of returning a province. Problems with TrainMA and MapMA constructors-- candidate constructor not viable... no arguments were provided. Fixed the coordinateFunctions issue. Going to rewrite MapMA now. (10:21) Ran into issues with BuildMA constructor because it required passing two cooridinates instead of a provinces object. Changed it to a proinces object instead of coordinates, ended up rewriting BuildMA. I think that because MapMA has the other main actions in it, I have to do the other ones first in order to fix MapMA.

	10:30pm - 11:05 pm (35 min): Ran into error with Commanders. moveUnit and moveUnitOne use Provinces, but Commanders can't have Provinces because they both inherit from AllUnits. Created Mobility class to take care of this-- take the moveUnit methods out of Commanders and put them into a more isolated file that doesn't go under AllUnits. Changed moveUnits to moveUnitsOne and moveUnitsOne to moveUnitsTwo for better understanding. (10:47) Done with mobility class. I'm pretty sure there might be some logic errors, but there are no outstanding issues right now that will prevent the program from running other than the AttackMA function-- I have to go in and fix this (has coordinates passed to it one at a time; I want to pass vectors of coordinates to be organized). Changed the AttackMA constructor to take on vectors and Participants and Commanders objects. AttackMA is a hot mess right now, like, hot hot. Going to come back to this later. Problem with AttackMA: doesn't like that it has Provinces, Commanders, and Participants all imported into one file. IDK what to do here-- have to check this out later
----------------------------------------
February 24: 4 hours, 40 min
 4:30 - 4:50pm (20 min): Working on solving AttackMA to not need Provinces. I think the issue is that Commanders and Provinces both take from AllUnits, so they can't take methods or instances of each other; inheritance is working against me. I'm going to make a struct to take care of the AllUnits stuff and have Commanders and Provinces take from that. Nevermind (the problem is that Participants uses Provinces)-- I don't think that'll work. I'm thinking about putting provincesMap inside of Participants so I can access the map, which is really the thing I really need, without having to call it in AttackMA. Fixed issue-- Commanders used otherFunctions which used AttackMA for some reason-- deleted include "AttacKMA" in otherFunctins, not showing those errors anymore.

	4:50 - 5:40 pm (50 min): Working on BuildMA constructor error. Error with BuildMA was that an instance used the old constructor-- changed it to the default constructor and it works now. Now going to fix ScoutMA. Moved viewAllStatsFunction from textFunctions to Participants. Following erros along-- I got an error in testFunctions so I moved the problem to Commanders, now doing TrainMA

	5:40 - 6:20 pm (40 min): Working on BuildMA. Removed otherFunctions from textFunctions. Moved printListOfProvinces from textFunctions to Participants. Removed coordinateFunctions from textFunctions, no more BuildMA error. Ran program, console is telling me to fix ArmyDeploymentMA now. Consolidated getNewName and getNewNameTwo into getNewName. Console is telling me to look at otherFunctions now. Added #include "Participants.h" to otherFunctions, now going to Provinces. Fixed instances of commandersPresentIndex to commanders. Going to coordinateFunctions (changed vector<vector<Provinces*>> to vector<vector<Provinces>>). Added otherFunctions to Mobility. Had error: storage class specified for a member declaration in otherFunctions. did #include "main.cpp" and it fixed it. Same problem happening in AttackMa and TrainMA, going to do the same thing-- it worked. 

6:20 - 6:40 pm (20 min): Getting error: 'using namespace' is not allowed in classes basically everywhere. Going in to every .h file and deleting using namespace std and replacing cout and cin with std::cout and std::cin. Literally went into every file and turned every string into std::string and vector into std::vector. I still have some left to do. I'm going to take a break.

9:30 pm - 12:00 am (2 hours, 30 min): Back at it. Cleaning up reamining errors. Went through every cpp file, changed endl to std::endl. Getting " error: storage class specified for a member declaration" message for extern objects in otherFunctions... I think I might have to turn this into a class. Issues with .d files (like AttackMA.d)-- had otherFunctions.h instead of INF.h (changed it into a class). Went into each one and updated the class name. Console telling me to work on AttackMA now. Wondering if I can absorb coordinateFunctions into Participants... I'm gonna go for it. I think it's working. I can now make pickProvince return Provinces* instead of vector<int>. Started working on ArmyDeploymentMA. Worked on proceedWithTraining among other things. Also working on cleaning up Provinces and Commanders as well as AllUnits.
---------------------------------------------
February 26: 2 hours
	8:10 - 9:05 pm (55 min): Working on figuring out the "no rule to make target" exit status. To use translateCoordinate, Provinces would have to use Participants. Because of this, I'm moving translateCoordinates to OtherFunctions. Broke up translateCoordinate into separate input and output methods to make it easier to understand-- I think I can consolidate them in the future in a way that's more straightforward, but that'll come later. createRandomName: consolidated findConsonant and findVowel by using strings to return characters instead of switch statements. Going to find a way to consolidate getChar and getInt too, or at least simplify them. Consolidated getChar and checkChar into one function by realizing I can literally just use a vector to pass the acceptable values. Going to do the same thing with int then see if I can combine the two. Found out how to consolidate getInt and getChar: consolidate the new methods into getInput and have that return a string. Depending on the context, I will modify the value after the method is called. For example, I'd do something like int num = stoi(getInput(...)) or char letter = getInput(...).at(0). Now, time to go through and debug everything...

	9:05 - 10:10 pm (1 hour, 5 min): Ironed out some problems with Mobility, going to rewrite AttackMA to accomodate being passed Provinces pointers, going to add translateCoordinates methods to Provinces to make translating easier. Rewrote AttackMA to use Commanders objects to find available units to attack with instead of the previous array system. Need to do more cleaning up, but the AttackMA constructors are mostly good to go I think. In the future (maybe next time), I need to clean up Provinces, Commanders, and AllUnits so things are less messy to deal with when working on other classes/methods.
--------------------------------------
February 28: 50 min
	11:10 pm - 12:00 am (50 min): Getting "No rule to make target 'coordinateFunctions.h', needed by 'AttackMA.d'.  Stop." error. Going to go through the various files and take out instances of coordinateFunctions. Went through all the .d files, deleted instances of coordinateFunctions.h. Console telling me to start fixing stuff from changes I made earlier-- add OF to previously otherFunctions.h. Deleted getTrainProvince (got a province to train units at), replaced with getYourCoords (uses pickProvince, checks if province belongs to participant). Removed printCoordinates from Provinces, moved to otherFunctions because otherFunctions uses Provnince, had to move printCoordinates to prevent circular dependency.